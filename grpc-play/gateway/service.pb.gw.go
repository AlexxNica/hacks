// Code generated by protoc-gen-grpc-gateway
// source: service.proto
// DO NOT EDIT!

/*
Package play is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package gateway

import (
	"encoding/json"
	"io"
	"net/http"

	"github.com/gengo/grpc-gateway/runtime"
	"github.com/golang/glog"
	"github.com/golang/protobuf/proto"
	pb "github.com/philips/hacks/grpc-play/proto"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
)

var _ codes.Code
var _ io.Reader
var _ = runtime.String
var _ = json.Marshal

func request_YourService_Echo(ctx context.Context, client pb.YourServiceClient, req *http.Request, pathParams map[string]string) (msg proto.Message, err error) {
	var protoReq pb.StringMessage

	if err = json.NewDecoder(req.Body).Decode(&protoReq); err != nil {
		return nil, grpc.Errorf(codes.InvalidArgument, "%v", err)
	}

	return client.Echo(ctx, &protoReq)
}

// RegisterYourServiceHandlerFromEndpoint is same as RegisterYourServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterYourServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string) (err error) {
	conn, err := grpc.Dial(endpoint)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				glog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				glog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterYourServiceHandler(ctx, mux, conn)
}

// RegisterYourServiceHandler registers the http handlers for service YourService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterYourServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	client := pb.NewYourServiceClient(conn)

	mux.Handle("POST", pattern_YourService_Echo, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_YourService_Echo(ctx, client, req, pathParams)
		if err != nil {
			runtime.HTTPError(w, err)
			return
		}

		runtime.ForwardResponseMessage(w, resp)

	})

	return nil
}

var (
	pattern_YourService_Echo = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"v1", "example", "echo"}, ""))
)
